apply plugin: "com.android.application"

import com.android.build.OutputFile

/**
 * The react.gradle file registers a task for each build variant (e.g. bundleDebugJsAndAssets
 * and bundleReleaseJsAndAssets).
 * These basically call `react-native bundle` with the correct arguments during the Android build
 * cycle. By default, bundleDebugJsAndAssets is skipped, as in debug/dev mode we prefer to load the
 * bundle directly from the development server. Below you can see all the possible configurations
 * and their defaults. If you decide to add a configuration block, make sure to add it before the
 * `apply from: "../../node_modules/react-native/react.gradle"` line.
 *
 * project.ext.react = [
 *   // the name of the generated asset file containing your JS bundle
 *   bundleAssetName: "index.android.bundle",
 *
 *   // the entry file for bundle generation
 *   entryFile: "index.android.js",
 *
 *   // whether to bundle JS and assets in debug mode
 *   bundleInDebug: false,
 *
 *   // whether to bundle JS and assets in release mode
 *   bundleInRelease: true,
 *
 *   // whether to bundle JS and assets in another build variant (if configured).
 *   // See http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Build-Variants
 *   // The configuration property can be in the following formats
 *   //         'bundleIn${productFlavor}${buildType}'
 *   //         'bundleIn${buildType}'
 *   // bundleInFreeDebug: true,
 *   // bundleInPaidRelease: true,
 *   // bundleInBeta: true,
 *
 *   // whether to disable dev mode in custom build variants (by default only disabled in release)
 *   // for example: to disable dev mode in the staging build type (if configured)
 *   devDisabledInStaging: true,
 *   // The configuration property can be in the following formats
 *   //         'devDisabledIn${productFlavor}${buildType}'
 *   //         'devDisabledIn${buildType}'
 *
 *   // the root of your project, i.e. where "package.json" lives
 *   root: "../../",
 *
 *   // where to put the JS bundle asset in debug mode
 *   jsBundleDirDebug: "$buildDir/intermediates/assets/debug",
 *
 *   // where to put the JS bundle asset in release mode
 *   jsBundleDirRelease: "$buildDir/intermediates/assets/release",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in debug mode
 *   resourcesDirDebug: "$buildDir/intermediates/res/merged/debug",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in release mode
 *   resourcesDirRelease: "$buildDir/intermediates/res/merged/release",
 *
 *   // by default the gradle tasks are skipped if none of the JS files or assets change; this means
 *   // that we don't look at files in android/ or ios/ to determine whether the tasks are up to
 *   // date; if you have any other folders that you want to ignore for performance reasons (gradle
 *   // indexes the entire tree), add them here. Alternatively, if you have JS files in android/
 *   // for example, you might want to remove it from here.
 *   inputExcludes: ["android/**", "ios/**"],
 *
 *   // override which node gets called and with what additional arguments
 *   nodeExecutableAndArgs: ["node"],
 *
 *   // supply additional arguments to the packager
 *   extraPackagerArgs: []
 * ]
 */

apply from: "../../node_modules/react-native/react.gradle"
apply from: "../../node_modules/react-native-code-push/android/codepush.gradle"

/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = false

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = false

android {
    compileSdkVersion 25
    buildToolsVersion '25.0.0'
    aaptOptions.cruncherEnabled = false
    aaptOptions.useNewCruncher = false
    dexOptions {
    javaMaxHeapSize "8g"

    }
    defaultConfig {
        applicationId "com.vloveapp"
        minSdkVersion 16
        targetSdkVersion 22
        versionCode 2
        versionName "1.0.1"
        multiDexEnabled true
        ndk {
            abiFilters "armeabi-v7a", "x86"
        }
        manifestPlaceholders = [
                QQ_APPID: "1106465225",
                 WB_APPID: "1604828620",
                JPUSH_APPKEY: "d97d63f088fb5f3bafd670f5", //在此替换你的APPKey
                APP_CHANNEL: "developer-default"    //应用渠道号
        ]
    }
    //发布渠道(批量修改的方式)
    productFlavors {
        aiyuan_test_Two_test {}
//        aityuan_channel_weibo {}
//        aityuan_channel_ali {}
//        aityuan_channel_xiaomi {}
//        aityuan_channel_360 {}
//        aityuan_channel_baidu {}
//        aityuan_channel_huawei {}
//        aityuan_channel_vivo {}
//        aityuan_channel_tencent {}
//        aityuan_channel_oppo {}
//        aityuan_channel_meizu {}
//        aityuan_channel_lenovo {}
//        aityuan_channel_anzhi {}
//        aityuan_channel_jifeng {}
//        aityuan_channel_mumayi {}
//        aityuan_channel_souguo {}
//        aityuan_channel_yingyonghui {}
    }
    productFlavors.all {
        flavor -> flavor.manifestPlaceholders = [UMENG_CHANNEL_VALUE: name]
    }
    signingConfigs {
        release {
            storeFile file('C:/apps/ityuan/android/app/liu-release-key.keystore')
            storePassword 'liudawei'
            keyAlias 'liu-key-alias'
            keyPassword 'liudawei'
        }
    }
    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false  // If true, also generate a universal APK
            include "armeabi-v7a", "x86"
        }
    }
    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled false
            buildConfigField "String", "CODEPUSH_KEY", '"rIRcJRyb0hlt9n2BBz6M6XUmvgmR4ksvOXqog"'
        }
        debug{
            buildConfigField "String", "CODEPUSH_KEY", '"0IduRLiRK060UKy4ofM0hjRXZTeZ4ksvOXqog"'

        }
    }

    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def versionCodes = ["armeabi-v7a":1, "x86":2]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride =
                        versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
            }
        }
    }
     lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }
}

dependencies {
    compile 'com.umeng.sdk:common:latest.integration'
   compile 'com.umeng.sdk:analytics:latest.integration'
    compile 'org.robolectric:shadows-multidex:3.3.2'
        compile project(':react-native-code-push')
    compile project(':jmessage-react-plugin')
    compile project(':react-native-weibo')
    compile project(':react-native-picker')
      compile project(':RCTWeChat')
    compile project(':react-native-qq')
    compile fileTree(dir: "libs", include: ["*.jar"])
    compile "com.android.support:appcompat-v7:23.0.1"
    compile 'com.android.support:multidex:1.0.1'
    compile "com.facebook.react:react-native:+"  // From node_modules
    compile 'com.facebook.fresco:fresco:1.3.0'
// 支持webp
compile 'com.facebook.fresco:webpsupport:1.3.0'
// gif加载使用
compile 'com.facebook.fresco:animated-gif:1.3.0'
// WebP（静态图+动图）加载使用
compile 'com.facebook.fresco:animated-webp:1.3.0'
    compile project(':aurora-imui-react-native')
     compile project(':react-native-audio')
    compile project(':jpush-react-native')  // 添加 jpush 依赖
    compile project(':jcore-react-native')  // 添加 jcore 依赖
    compile project(':react-native-linear-gradient')
    compile project(':react-native-image-picker')
    compile project(path: ':react-native-sound')
    compile project(':react-native-splash-screen')
    compile project(path: ':react-native-image-crop-picker')
    compile project(path: ':react-native-fetch-blob')
}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.compile
    into 'libs'
}
